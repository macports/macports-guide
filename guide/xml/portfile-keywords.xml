<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
"http://docbook.org/xml/5.0/dtd/docbook.dtd">
<section xml:id="reference.keywords" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Global Keywords</title>

  <para>MacPorts keywords are used to specify required or optional items
  within a Portfile, or to override default options used by MacPorts base for
  individual ports. Keywords are to be used within the <quote>global</quote>
  and <quote>variant</quote> sections of Portfiles, and not within optional
  port phase declarations.</para>

  <para>The global keywords listed below specify information for ports as a
  whole, whereas the keywords listed under a port phase specify information to
  be used during a particular installation phase.</para>

  <variablelist>
    <varlistentry>
      <term>PortSystem</term>

      <listitem>
        <para>The first non-comment line of every Portfile; it should be
        followed by PortGroup inclusions (if any) and then a blank line.
        It defines which version of the Portfile interpreter will be used.
        (There is currently only one version.)</para>

        <programlisting>PortSystem          1.0

</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>name</term>

      <listitem>
        <para>The name of the port. To avoid special interpretation by shells
        and the like, names should contain only alphanumeric characters,
        underscores, dashes and periods. For projects whose proper names contain
        <quote>+</quote> characters, change these to <quote>x</quote> (e.g.,
        <quote>libstdc++</quote> becomes <quote>libstdcxx</quote>).</para>

        <programlisting>name                foo</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>version</term>

      <listitem>
        <para>The version of the software. Version numbers are often dotted
        decimals, though some projects may use other formats.</para>

        <para>The version keyword should adhere as closely as possible to the
        format used by the upstream project (e.g., as reported by a program's
        <literal>-v</literal> or <literal>--version</literal> flag or on the
        project's web site), omitting any preceding <literal>v</literal> or
        other extraneous characters that are not part of the version number.
        Especially, the version should not be misformatted merely to accommodate
        an unusual distfile name. For example, if the distfile name is
        <literal>foo-v1_2_3.tar.gz</literal> and the project reports its version
        as <literal>v1.2.3</literal>, the version keyword should be set to
        <literal>1.2.3</literal> and distname should be overridden as needed
        (ideally by transforming the version using a procedure such as
        <code>string map</code>).</para>

        <para>When updating the version of a port that installs a dynamic
        library, check (by examining the second line of output from the
        <userinput>otool -L</userinput> command run on the library before and
        after upgrading) whether its install name has changed. If it has,
        increase the revision of every port that links with the library to
        rebuild it with the new library.</para>

        <programlisting>version             1.23.45</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>revision</term>

      <listitem>
        <para>An optional integer (the default is <literal>0</literal>) that is
        incremented when a port is updated independently of the version of the
        software. The revision line usually follows the version line.</para>

        <para>In Portfiles that have subports, it is often appropriate for each
        subport (including the main port) to have a separate revision line.
        (This does not usually apply to Portfiles for Perl, PHP, Python, or Ruby
        modules which create numerous similar subports for the same version of
        the software.)</para>

        <para>It is recommended to set the revision in all ports, even if the
        revision is 0. This makes it easier for other developers to see where to
        increase the revision in your port, should that need arise. This is
        especially helpful for Portfiles that have subports.</para>

        <para>When increasing the revision in a Portfile with subports, consider
        carefully which of the subports (possibly including the main port) need
        to have their revisions increased.</para>

        <para>When increasing the revision in a Portfile that does not have any
        revision lines yet, take a moment to check if the Portfile has
        subports.</para>

        <para>Just like when a port's version increases, a port is considered
        outdated when its revision increases. To avoid causing users to rebuild
        ports unnecessarily, don't increase the revision unless doing so would
        result in a change for users who already have the ports
        installed.</para>

        <para>Some examples of situations in which a port's revision should be
        increased:</para>

        <itemizedlist>
          <listitem>
            <para>changing configure arguments or build flags or any other
            change that will cause the installed files to be different</para>
          </listitem>
          <listitem>
            <para>installing additional files, such as documentation, or
            removing any files which had previously been installed</para>
          </listitem>
          <listitem>
            <para>changing the names or locations of any installed files</para>
          </listitem>
          <listitem>
            <para>adding a dependency to depends_lib or depends_run</para>
          </listitem>
          <listitem>
            <para>a library dependency's install_name has changed</para>
          </listitem>
          <listitem>
            <para>removing a variant that a user might have installed</para>
          </listitem>
          <listitem>
            <para>adding a variant name to default_variants</para>
          </listitem>
        </itemizedlist>

        <para>Some examples of situations in which a port's revision should not
        be increased:</para>

        <itemizedlist>
          <listitem>
            <para>fixing a build failure</para>
          </listitem>
          <listitem>
            <para>adding a dependency to depends_fetch, depends_extract,
            depends_build, or depends_test</para>
          </listitem>
          <listitem>
            <para>setting or changing the port's license</para>
          </listitem>
          <listitem>
            <para>adding a new non-default variant</para>
          </listitem>
          <listitem>
            <para>removing a variant name from default_variants</para>
          </listitem>
          <listitem>
            <para>changing comments or whitespace in the Portfile</para>
          </listitem>
          <listitem>
            <para>any other change to the Portfile that does not change the
            files it installs</para>
          </listitem>
        </itemizedlist>

        <programlisting>revision            1</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>epoch</term>

      <listitem>
        <para>An optional integer (the default is <literal>0</literal>) that
        must be increased when a port is updated to a version that appears
        (according to the <code>vercmp</code> procedure's version number
        comparison algorithm) to be less than the previous version. For example,
        updating from <literal>2.0-rc1</literal> to <literal>2.0</literal>, or
        from <literal>1.10</literal> to <literal>1.2</literal>, or from
        <literal>20070928</literal> to <literal>1.0</literal>.</para>

        <para>The purpose of increasing the epoch is to cause MacPorts to
        consider a port to be outdated, even if that wouldn't otherwise be the
        case due to the specific version numbers. Don't set the epoch unless
        it's required. In most ports, the version number advances according to
        the normal dotted-decimal sequence, so most ports will never have a need
        to set the epoch.</para>

        <para>Some Portfile authors have used large epoch values that look like
        dates in YYYYMMDD format (e.g., <literal>20091231</literal>). When it is
        necessary to increase the epoch in such ports, the new epoch can be set
        to the current date. It is not recommended to use this format when
        adding an epoch to a port that does not already have one; instead, just
        set the epoch to <literal>1</literal>, and when needing to increase an
        existing small epoch, increase it by 1.</para>

        <programlisting>epoch               1</programlisting>

        <note>
          <para>A port's epoch can never be decreased. Removing the epoch from
          the port would decrease it to its default value of
          <literal>0</literal>, so once added to a port the epoch can also never
          be removed. When adding an epoch, take extra care to ensure that it is
          necessary, since a mistakenly added epoch cannot be undone. In
          Portfiles that have subports with different software versions,
          consider whether the epoch needs to be increased in all subports or
          only in some of them.</para>
        </note>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>categories</term>

      <listitem>
        <para>The category under which the ported software falls. The first
        category should be the same as the directory within which the Portfile
        is stored; secondary and tertiary categories may be selected.</para>

        <programlisting>categories          net security</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry xml:id="reference.keywords.maintainers">
      <term>maintainers</term>

      <listitem>
        <para>
          A port's maintainers are the people who have agreed to take
          responsibility for keeping the port up-to-date. Most ports have only
          a single maintainer, but some ports have two or more co-maintainers.
          The <literal>maintainers</literal> keyword lists the maintainers'
          GitHub usernames or email addresses. GitHub usernames start with an
          <literal>@</literal> symbol. Email addresses are preferably listed in
          the obfuscated form below to hide them from spambots:</para>

        <itemizedlist>
          <listitem>
            <para>For addresses in domain @macports.org, simply omit the
            domain name.</para>
          </listitem>

          <listitem>
            <para>For addresses in other domains, e.g.,
              <email>account@example.org</email>, use the convention
              <literal>example.org:account</literal> to specify the
              address.</para>
          </listitem>
        </itemizedlist>

        <para>In the example below, the port is maintained by a GitHub user
          named neverpanic, and the owners of the two email addresses
          <email>jdoe@macports.org</email> and
          <email>julesverne@example.org</email></para>

        <programlisting>maintainers         @neverpanic \
                    jdoe \
                    example.org:julesverne</programlisting>

        <para>Braces can be used to express that these refer to the same
            person, for example the GitHub username and an email. In the
            following example, the port is maintained by a GitHub user named
            jverne, that can also be contacted directly at
            <email>julesverne@example.org</email>.</para>

        <programlisting>maintainers         {@jverne example.org:julesverne}</programlisting>

        <note>
          <para>
            The address <literal>nomaintainer</literal> designates a port that
            is not maintained by anybody and may be modified by any committer.
            Feel free to claim maintainership of a nomaintainer port if
            desired. The address <literal>openmaintainer</literal> designates
            a port that has a maintainer who allows minor changes to be
            committed without his or her prior approval. Port maintainers who
            are not committers are encouraged to add
            <literal>openmaintainer</literal> to their ports.</para>
        </note>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>description</term>

      <listitem>
        <para>A short sentence fragment describing the software.</para>

        <programlisting>description         a classic shooter arcade game</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>long_description</term>

      <listitem>
        <para>One or more sentences describing the software.</para>

        <para>The long description can be based on a description provided by the
        upstream project (e.g., in its readme or on its web site) but avoid
        repeating information already present elsewhere in the Portfile, such as
        the software's license (see the <varname>license</varname> keyword) or
        the platforms on which it runs (see the <varname>platforms</varname>
        keyword), and avoid including information irrelevant to a MacPorts user,
        such as compilation instructions or other steps the Portfile has already
        performed for the user. More specific usage instructions are best left
        to the <varname>notes</varname> keyword.</para>

        <para>If a port provides a program that is different from the port name,
        it can be a good idea to include the program name in the long
        description so that a user could find it by searching.</para>

        <para>Long descriptions are usually a single paragraph. MacPorts will
        word-wrap long lines to the terminal width as needed. Break long lines
        with escaped newlines for better legibility within the Portfile. If
        literal newlines need to be displayed to the user, they can be inserted
        using <literal>\n</literal>. Place the <literal>\n</literal> at the
        beginning of the next line, not at the end of the previous line. To
        create a new paragraph, insert two newlines.</para>

        <para>Sometimes the port's name and short description are reused as part
        of the long description. When referencing the
        <varname>description</varname> keyword (or any other list keyword with
        more than one item), it should be preceded with the expand
        operator.</para>

        <programlisting>long_description    ${name} is {*}${description} derived from \
                    the game alien-munchers.  Not suitable for \
                    children under two years old.</programlisting>
        <programlisting>long_description    foobar provides the following programs: \
                    \n \
                    \n* foo, a lorem ipsum utility \
                    \n* bar, a high-performance amet consectetur \
                    \n* baz, an eiusmod tempor converter</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>homepage</term>

      <listitem>
        <para>The software's primary web site.</para>

        <para>Usually the homepage should be a URL that does not redirect to
        another URL. For example, if an http URL redirects to an https URL, list
        the https URL. Or if a URL without a trailing slash redirects to the URL
        with the trailing slash, list the URL with the trailing slash. If the
        project advertises a short URL that redirects to a longer URL, it is
        acceptable to list the short URL despite the redirect.</para>

        <para>When the homepage is just a hostname with no path component, don't
        include a trailing slash.</para>

        <programlisting>homepage            https://www.example.org/apps/</programlisting>
        <programlisting>homepage            https://www.example.com</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>platforms</term>

      <listitem>
        <para>A list of the platforms on which the port is expected to work.
        Defaults to <literal>darwin</literal> if not set. Consists of a list of
        platform specifiers, each of which is at minimum a platform name and
        may also include version information. Possible platform names are:</para>

        <itemizedlist>
          <listitem>
            <para><literal>darwin</literal> (equivalent to specifying both
            <literal>macosx</literal> and <literal>puredarwin</literal>)</para>
          </listitem>
          <listitem>
            <para><literal>macosx</literal> (macOS as distributed by
            Apple)</para>
          </listitem>
          <listitem>
            <para><literal>puredarwin</literal> (the open-source Darwin OS
            without Apple's proprietary components)</para>
          </listitem>
          <listitem>
            <para><literal>freebsd</literal></para>
          </listitem>
          <listitem>
            <para><literal>linux</literal></para>
          </listitem>
          <listitem>
            <para><literal>netbsd</literal></para>
          </listitem>
          <listitem>
            <para><literal>openbsd</literal></para>
          </listitem>
          <listitem>
            <para><literal>solaris</literal></para>
          </listitem>
          <listitem>
            <para><literal>sunos</literal></para>
          </listitem>
        </itemizedlist>

        <para>A platform specifier that is just a platform name is purely
        informational for users; it is displayed in the output of <code>port info</code>
        but has no other effect.
        Ports for software that does not require macOS-specific features
        can generally use the default value of <literal>darwin</literal>. Most
        ports use this value on the
        presumption that they would work on Pure Darwin, even if that has not
        been attempted. Ports for software that is known to require
        macOS-specific features should use <literal>macosx</literal>.
        Including the xcode portgroup will change the default to <literal>macosx</literal>
        automatically.</para>

        <para>See also <varname>os.platform</varname>.</para>

        <programlisting>platforms           macosx freebsd</programlisting>

        <para>(Added: MacPorts 2.8.0) A platform specifier can also be a list, where
        the first element is a platform name and subsequent elements are pairs of
        comparison operators and versions. This indicates the version ranges of each
        platform that the port works on.</para>

        <para>If a platform specifier's name matches <code>${os.platform}</code>, then
        each comparison operator in the specifier is applied to <code>${os.version}</code>
        as the left operand and the listed version as the right operand. If any of the
        comparisons evaluate to false, then the default value of <code>known_fail</code>
        is changed to <literal>yes</literal>.</para>

        <para>Possible operators are: <code>&lt;</code>, <code>&lt;=</code>,
        <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code>.
        The <code>==</code> and <code>!=</code> operators support globbing. The rest
        of the operators compare as per the <code>vercmp</code> command.
        </para>

        <para>Examples:</para>
        <para>A port that works on Darwin 12 and later:</para>
        <programlisting>platforms           {darwin &gt;= 12}</programlisting>

        <para>A port that works on Darwin versions between 10 and 19 inclusive:</para>
        <programlisting>platforms           {darwin &gt;= 10 &lt; 20}</programlisting>

        <para>A port that works on Darwin versions between 10 and 19 but not
            version 12.x:</para>
        <programlisting>platforms           {darwin &gt;= 10 != 12.* &lt; 20}</programlisting>

        <para>The special value <literal>any</literal> can also be used to indicate that
        a port will install identical files across platforms or platform versions. This can
        help to reduce the number of binary archives that have to be built. In most cases,
        this is only applicable to ports that don't install any architecture-specific
        files.</para>

        <para>Ports that install identical files on any platform should use:</para>
        <programlisting>platforms           any</programlisting>

        <para>Ports that install identical files on any Darwin version, but may install
        different files on other platforms, should use:</para>
        <programlisting>platforms           {darwin any}</programlisting>

      </listitem>
    </varlistentry>

    <varlistentry>
      <term>supported_archs</term>

      <listitem>
        <para>The CPU architectures for which this port can be built. Archs currently
        supported by macOS are: arm64, i386, ppc, ppc64, x86_64. If this option is not
        set, it is assumed that the port can build for all archs. If a port does not
        install any architecture-specific files, use the special value
        <option>noarch</option>.</para>

        <para>If the building architecture isn't among supported_archs, port
        fails with an error message, except when building on x86_64 and
        supported_archs contains i386 or when building on ppc64 and
        supported_archs contains ppc, in which case the port will be built in
        32-bit mode.</para>

        <programlisting>supported_archs     i386 ppc</programlisting>
        <programlisting>supported_archs     noarch</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>license</term>

      <listitem>
        <para>The proper format for license consists of the license name,
        followed by a hyphen and number if indicating a specific version. A
        space should be placed between licenses if there is more than one that
        applies. If an element in the license list is itself a list, it is
        interpreted as offering a choice of any one of the licenses in the
        sub-list.
        </para>

        <para>If the version number is a
        <quote>.0</quote> version, the <quote>.0</quote> should be
        omitted to make the version an integer. If the author gives the choice
        of using a given license or <quote>any later version</quote> of it,
        append a plus sign (+) to the version number. If the version
        specified in this case is also the earliest version,
        just leave out the version number entirely since it implies all
        versions.</para>

        <programlisting>license             GPL-3</programlisting>
        <programlisting>license             {freetype GPL}</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>license_noconflict</term>

      <listitem>
        <para>By default, it is assumed that ports may use libraries or
        headers from their dependencies and thus form a derivative work.
        A dependency with an incompatible license thus prevents the port
        from being distributed in binary form. If a dependency with an
        incompatible license is not used in such a way that a derivative
        work is formed, or should not prevent binary distribution for any
        other reason, add its name to this list.
        </para>
        <programlisting>license_noconflict  openssl</programlisting>
        <programlisting>license_noconflict  readline gdbm</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>use_xcode</term>

      <listitem>
        <para>(Added: MacPorts 2.6.0) By default, it is assumed on
        macOS that ports will not need tools from Xcode.app unless (1)
        Command Line Tools aren't installed, (2) you are on an old version
        of Mac OS X that does not support the xcode-select mechanism, or (3)
        the port uses <code>build.type xcode</code> or includes the
        <code>xcode</code> PortGroup. If a port needs to use Xcode (i.e.,
        xcodebuild) in any way, <code>use_xcode yes</code> should be set or
        the port should include the xcode PortGroup. The environment
        variable DEVELOPER_DIR is now exported during all build phases, set
        to the value of <code>${configure.developer_dir}</code> which may be
        the directory of Xcode or CLT depending on use_xcode. This means
        that libxcselect shims (i.e., /usr/bin/clang) will resolve to
        Xcode/CLT. Build systems that ignore the environment may
        accidentally use Xcode which will cause a failure in trace mode.
        </para>
        <programlisting>use_xcode           no</programlisting>
        <programlisting>use_xcode           yes</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>known_fail</term>

      <listitem>
        <para>Setting this option to <code>yes</code> indicates that the
        port is known not to work. Users will be told this and asked for
        confirmation if they attempt to install it, and the Buildbot and
        GitHub Actions will not attempt to build it.</para>
        <para>Don't set this option conditionally on the basis of
        anything that can change dynamically, such as <code>$build_arch</code>
        or <code>$xcodeversion</code>, since it will be
        recorded in the static PortIndex. If a port works only on certain
        OS versions, use the <code>platforms</code> option to indicate
        this rather than setting <code>known_fail</code> directly.</para>
        <programlisting>known_fail           yes</programlisting>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>macosx_deployment_target</term>

      <listitem>
        <para>The macOS release to target.</para>
        <para>During the configure phase, environment variable
        <code>MACOSX_DEPLOYMENT_TARGET</code> is set to the specified
        value.</para>
        <para>This option is also used when building binary packages,
        via <code>port pkg</code>, <code>port mpkg</code>,
        <code>port dmg</code>, and <code>port mdmg</code>.
        Specifically, MacPorts will create a package/DMG that is
        compatible with the desired macOS release. In addition, it is
        used to set version-related metadata for the Apple installer
        package, including <code>allowed-os-versions</code>.</para>
        <programlisting>macosx_deployment_target 10.8</programlisting>
      </listitem>
    </varlistentry>

  </variablelist>
</section>

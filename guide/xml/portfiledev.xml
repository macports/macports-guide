<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="development">
  <title>Portfile Development</title>

  <para>A port is a distribution of software that can be compiled and
  installed using MacPorts. A <filename>Portfile</filename> describes all
  the required steps such as where to get the source code from upstream,
  which patches have to be applied and which other tools and commands are
  required to build the source code.</para>

  <para>Each port consists of multiple files in a directory, usually within
  a category subdirectory of the root of a ports tree. The MacPorts
  Project distributes the main ports tree that is by default
  <link linkend="internals.configuration-files.sources-conf">configured</link>
  in all installations of MacPorts. This section serves as a reference for
  the directory structure of a single port and the layout of the files
  within. The only required file in a port is the
  <filename>Portfile</filename>.</para>

  <section id="development.introduction">
    <title>Portfile Introduction</title>

    <para>A MacPorts Portfile is a <ulink
    url="http://en.wikipedia.org/wiki/Tcl">TCL</ulink> script that usually
    contains only the simple keyword/value combinations and Tcl extensions as
    described in the <link linkend="reference">Portfile Reference</link>
    chapter, though it may also contain arbitrary TCL code. Every port has a
    corresponding Portfile, but Portfiles do not completely define a port's
    installation behavior since MacPorts base has default port installation
    characteristics coded within it. Therefore Portfiles need only specify
    required options, though some ports may require non-default
    options.</para>

    <para>A common way for Portfiles to augment or override MacPorts base
    default installation phase characteristics is by using
    <filename>Portfile</filename> phase declaration(s). If you use Portfile
    phase declaration(s), you should know how to identify the
    <quote>global</quote> section of a Portfile. Any statements not contained
    within a phase declaration, no matter where they are located in a Portfile,
    are said to be in the global section of the Portfile; therefore the global
    section need not be contiguous. Likewise, to remove statements from the
    global section they must be placed within a phase declaration.</para>

    <para>The main phases you need to be aware of when making a Portfile are
    these:</para>

    <itemizedlist>
      <listitem>
        <para>Fetch</para>
      </listitem>

      <listitem>
        <para>Extract</para>
      </listitem>

      <listitem>
        <para>Patch</para>
      </listitem>

      <listitem>
        <para>Configure</para>
      </listitem>

      <listitem>
        <para>Build</para>
      </listitem>

      <listitem>
        <para>Destroot</para>
      </listitem>
    </itemizedlist>

    <para>The default installation phase behavior performed by the MacPorts
    base works fine for applications that use the standard
    <command>configure</command>, <command>make</command>, and <command>make
    install</command> steps, which conform to phases configure, build, and
    destroot respectively. For applications that do not conform to this
    standard behavior, any installation phase may be augmented using <link
    linkend="development.examples.augment">pre- and/or post- phases</link>, or
    even <link linkend="development.examples.override">overridden</link> or
    <link linkend="development.examples.eliminate">eliminated</link>. See
    <link linkend="development.examples">Example Portfiles</link>
    below.</para>

    <note>
      <para>For a detailed description of all port phases, see the <link
      linkend="reference.phases">Portfile Reference</link> chapter.</para>
    </note>
  </section>

  <section id="development.creating-portfile">
    <title>Creating a Portfile</title>

    <para>Here we list the individual Portfile components for an application
    that conforms to the standard <command>configure</command>,
    <command>make</command>, and <command>make install</command> steps of most
    open source application installs.</para>

    <orderedlist>
      <listitem>
        <para>Modeline</para>

        <para>This should be the first line of a Portfile. It sets the correct
        editing options for vim and emacs. See <link
        linkend="development.practices.portstyle">Port Style</link> for more
        information. Its use is optional and up to the port maintainer.</para>

        <programlisting># -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4</programlisting>
      </listitem>

      <listitem>
        <para>PortSystem line</para>

        <para>This statement is required for all ports.</para>

        <programlisting>PortSystem          1.0</programlisting>
      </listitem>

      <listitem>
        <para>Port name</para>

        <programlisting>name                rrdtool</programlisting>
      </listitem>

      <listitem>
        <para>Port version</para>

        <programlisting>version             1.2.23</programlisting>
      </listitem>

      <listitem>
        <para>Port categories</para>

        <para>A port may belong to more than one category, but the first
        (primary) category should match the directory name in the ports tree
        where the Portfile is to reside.</para>

        <programlisting>categories          net</programlisting>
      </listitem>

      <listitem>
        <para>Platform statement</para>

        <programlisting>platforms           darwin</programlisting>
      </listitem>

<!--
      <listitem>
          <para>Port license</para>

        <para>A port's license indicates the class of license employed by the
        owner. Setting this signals the main intentions of the license with
        respect to binary and source distribution. It is presently only for
        informational purposes and MacPorts does not distribute binaries.</para>

        <itemizedlist>
          <listitem>
            <para><varname>GPL</varname> – signifies the requirements of GNU
            General Public    License; the source be available in the same place
            as the binary.</para>

            <para><varname>LGPL</varname> – use this for the GNU Lesser General
            Public License,    which mandates that    the source and binary are
            available in the same place.</para>

            <para><varname>BSD</varname> – covering the original and new BSD
            license as well as MIT and Apache; these licenses allow for optional
            inclusion of source code.</para>

            <para><varname>Artistic</varname> – aptly named to indicate the
            Artistic license and derivatives.</para>

            <para><varname>Artistic-GPL</varname> – dual-licensed under the
            Artistic and GPL licenses.</para>

            <para><varname>/GFDL</varname> and <varname>/LDP</varname> – these
            suffixes indicate that the documentation provided is under the GNU
            Free Documentation License or the Linux Documentation Project</para>

            <para><varname>RESTRICT</varname> – when the licenses are
            restrictive.</para>

            <para><varname>RESTRICT-EYESONLY</varname> – if the license does not
            permit distribution.</para>

            <para><varname>PUBLIC</varname> – the code is not copyrighted:
            anyone can do anything</para>
          </listitem>
        </itemizedlist>
      </listitem>
-->
      <listitem>
        <para>Port maintainers</para>

        <para>
          A port's maintainers are the people who have agreed to take
          responsibility for keeping the port up-to-date. The
          <literal>maintainers</literal> keyword lists the maintainers' GitHub
          usernames or email addresses, preferably in the obfuscated form which
          hides them from spambots. For more, see the full explanation of the
          <link linkend="reference.keywords.maintainers">maintainers
            keyword</link> in the <link linkend="reference.keywords">Global
            Keywords</link> section of the <link linkend="reference">Portfile
            Reference</link> chapter.</para>

        <programlisting>maintainers         @neverpanic \
                    jdoe \
                    example.org:julesverne</programlisting>
      </listitem>

      <listitem>
        <para>Port description</para>

        <programlisting>description         Round Robin Database</programlisting>
      </listitem>

      <listitem>
        <para>Port long_description</para>

        <programlisting>long_description    RRDtool is a system to store and display time-series \
                    data</programlisting>
      </listitem>

      <listitem>
        <para>A port's application homepage</para>

        <programlisting>homepage            http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/</programlisting>
      </listitem>

      <listitem>
        <para>A port's download URLs</para>

        <programlisting>master_sites        http://oss.oetiker.ch/rrdtool/pub/ \
                    ftp://ftp.pucpr.br/rrdtool/</programlisting>
      </listitem>

      <listitem>
        <para>Port checksums</para>

        <para>The checksums specified in a Portfile are checked with the
        fetched tarball for security. For the best security, use rmd160 
        and sha256 checksum types.</para>

        <programlisting>checksums               rmd160  7bbfce4fecc2a8e1ca081169e70c1a298ab1b75a \
                        sha256  2829fcb7393bac85925090b286b1f9c3cd3fbbf8e7f35796ef4131322509aa53</programlisting>

        <para>To find the correct checksums for a port's distribution file,
        follow one of these examples:</para>

        <programlisting><prompt>%%</prompt> <userinput>openssl dgst -rmd160 rrdtool-1.2.23.tar.gz</userinput>
<prompt>%%</prompt> <userinput>openssl dgst -sha256 rrdtool-1.2.23.tar.gz</userinput></programlisting>

        <screen>RIPEMD160( ... rrdtool-1.2.23.tar.gz)= 7bbfce4fecc2a8e1ca081169e70c1a298ab1b75a

SHA256( ... rrdtool-1.2.23.tar.gz)= 2829fcb7393bac85925090b286b1f9c3cd3fbbf8e7f35796ef4131322509aa53</screen>

        <para>or update the version in the Portfile:</para>

        <programlisting><prompt>%%</prompt> <userinput>sudo port edit rrdtool</userinput></programlisting>

        <para>and run:</para>

        <programlisting><prompt>%%</prompt> <userinput>port -v checksum rrdtool</userinput></programlisting>

        <screen>--->  Fetching distfiles for rrdtool
--->  Verifying checksums for rrdtool
--->  Checksumming rrdtool-1.2.23.tar.gz
Error: Checksum (rmd160) mismatch for rrdtool-1.2.23.tar.gz
Portfile checksum: rrdtool-1.2.23.tar.gz rmd160 ...WRONGCHECKSUM...
Distfile checksum: rrdtool-1.2.23.tar.gz rmd160 7bbfce4fecc2a8e1ca081169e70c1a298ab1b75a
Error: Checksum (sha256) mismatch for rrdtool-1.2.23.tar.gz
Portfile checksum: rrdtool-1.2.23.tar.gz sha256 ...WRONGCHECKSUM...
Distfile checksum: rrdtool-1.2.23.tar.gz sha256 2829fcb7393bac85925090b286b1f9c3cd3fbbf8e7f35796ef4131322509aa53
The correct checksum line may be:
checksums           rmd160  7bbfce4fecc2a8e1ca081169e70c1a298ab1b75a \
                    sha256  2829fcb7393bac85925090b286b1f9c3cd3fbbf8e7f35796ef4131322509aa5
Error: Failed to checksum rrdtool: Unable to verify file checksums
Error: See ...SOMEPATH.../rrdtool/main.log for details.
Error: Follow http://guide.macports.org/#project.tickets to report a bug.
Error: Processing of port rrdtool failed</screen>
      </listitem>

      <listitem>
        <para>Port dependencies</para>

        <para>A port's dependencies are ports that must be installed before
        another port is installed.</para>

        <programlisting>depends_lib         port:perl5.8 \
                    port:tcl \
                    port:zlib</programlisting>
      </listitem>

      <listitem>
        <para>Port configure arguments (optional)</para>

        <programlisting>configure.args      --enable-perl-site-install \
                    --mandir=${prefix}/share/man</programlisting>
      </listitem>
    </orderedlist>
  </section>

  <section id="development.examples">
    <title>Example Portfiles</title>

    <para>In this section we begin by taking a look at a complete simple
    Portfile; then we see how to <link
    linkend="development.examples.augment">augment default phases</link> by
    defining pre- and post- phases, how to <link
    linkend="development.examples.override">override default phases</link>,
    and finally how to <link
    linkend="development.examples.eliminate">eliminate port
    phases</link>.</para>

    <section id="development.examples.basic">
      <title>A Basic Portfile</title>

      <programlisting># -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                rrdtool
version             1.2.23
categories          net
platforms           darwin
license             GPL-2+
maintainers         julesverne
description         Round Robin Database
long_description    RRDtool is a system to store and display time-series data
homepage            http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/
master_sites        http://oss.oetiker.ch/rrdtool/pub/ \
                    ftp://ftp.pucpr.br/rrdtool/

checksums           rmd160  7bbfce4fecc2a8e1ca081169e70c1a298ab1b75a \
                    sha256  2829fcb7393bac85925090b286b1f9c3cd3fbbf8e7f35796ef4131322509aa53

depends_lib         path:bin/perl:perl5 \
                    port:tcl \
                    port:zlib

configure.args      --enable-perl-site-install \
                    --mandir=${prefix}/share/man</programlisting>
    </section>

    <section id="development.examples.augment">
      <title>Augment Phases Using pre- / post-</title>

      <para>To augment a port's installation phase, and not override it, you
      may use pre- and post- installation phases as shown in this
      example.</para>

      <programlisting>post-destroot {
    # Install example files not installed by the Makefile
    file mkdir ${destroot}${prefix}/share/doc/${name}/examples
    file copy ${worksrcpath}/examples/ \
        ${destroot}${prefix}/share/doc/${name}/examples
}</programlisting>
    </section>

    <section id="development.examples.override">
      <title>Overriding Phases</title>

      <para>To override the automatic MacPorts installation phase processing,
      define your own installation phases as shown in this example.</para>

      <programlisting>destroot {
    xinstall -m 755 -d ${destroot}${prefix}/share/doc/${name}
    xinstall -m 755 ${worksrcpath}/README ${destroot}${prefix}/share/doc/${name}
}</programlisting>
    </section>

    <section id="development.examples.eliminate">
      <title>Eliminating Phases</title>

      <para>To eliminate a default phase, simply define a phase with no
      contents as shown.</para>

      <programlisting>build {}</programlisting>

      <note>
        <para>Because many software packages do not use
        <option>configure</option>, a keyword is provided to eliminate the
        <option>configure</option> phase. Another exception is the
        <option>destroot</option> phase may not be eliminated. See the
        chapter <link linkend="reference">Portfile Reference</link> for full
        information.</para>
      </note>
    </section>

    <section id="development.examples.startupitem">
      <title>Creating a StartupItem</title>

      <para>Startupitems may be placed in the global section of a
      Portfile.</para>

      <programlisting>startupitem.create      yes
startupitem.name        nmicmpd
startupitem.executable  "${prefix}/bin/nmicmpd"</programlisting>
    </section>
  </section>

  <section id="development.variants">
    <title>Port Variants</title>

    <para>Variants are a way for port authors to provide options that may be
    invoked at install time. They are declared in the global section of a
    Portfile using the <quote>variant</quote> keyword, and should include <link
    linkend="reference.variants.descriptions">carefully chosen variant
    descriptions</link>.</para>

    <section id="development.variants.options">
      <title>Example Variants</title>

      <para>The most common actions for user-selected variants is to add or
      remove dependencies, configure arguments, and build arguments according
      to various options a port author wishes to provide. Here is an example
      of several variants that modify depends_lib and configure arguments for
      a port.</para>

      <programlisting>variant fastcgi description {Add fastcgi binary} {
    configure.args-append \
            --enable-fastcgi \
            --enable-force-cgi-redirect \
            --enable-memory-limit
}

variant gmp description {Add GNU MP functions} {
    depends_lib-append port:gmp
    configure.args-append --with-gmp=${prefix}

}

variant sqlite description {Build sqlite support} {
    depends_lib-append \
        port:sqlite3
    configure.args-delete \
        --without-sqlite \
        --without-pdo-sqlite
    configure.args-append \
        --with-sqlite \
        --with-pdo-sqlite=${prefix} \
        --enable-sqlite-utf8
}</programlisting>

      <note>
        <para>Variant names may contain only the characters A-Z, a-z, and the
        underscore character <quote>_</quote>. Therefore, take care to never
        use hyphens in variant names.</para>
      </note>

      <para>In the example variant declaration below, the configure argument
      <literal>--without-x</literal> is removed and a number of others are
      appended.</para>

      <programlisting>variant x11 description {Builds port as an X11 program with Lucid widgets} {
    configure.args-delete   --without-x
    configure.args-append   --with-x-toolkit=lucid \
                            --without-carbon \
                            --with-xpm \
                            --with-jpeg \
                            --with-tiff \
                            --with-gif \
                            --with-png
    depends_lib-append      lib:libX11:XFree86 \
                            lib:libXpm:XFree86 \
                            port:jpeg \
                            port:tiff \
                            port:libungif \
                            port:libpng
}</programlisting>
    </section>

    <section id="development.variants.phase">
      <title>Variant Actions in a Phase</title>

      <para>If a variant requires options in addition to those provided by
      keywords using -append and/or -delete, in other words, any actions that
      would normally take place within a port installation phase, do not try
      to do this within the variant declaration. Rather, modify the behavior
      of any affected phases when the variant is invoked using the
      variant_isset keyword.</para>

      <programlisting>post-destroot {
    xinstall -m 755 -d ${destroot}${prefix}/etc/
    xinstall ${worksrcpath}/examples/foo.conf \
        ${destroot}${prefix}/etc/

    if {[variant_isset carbon]} {
        delete ${destroot}${prefix}/bin/emacs
        delete ${destroot}${prefix}/bin/emacs-${version}
    }
}</programlisting>
    </section>

    <section id="development.variants.default">
      <title>Default Variants</title>

      <para>Variants are used to specify actions that lie outside the core
      functions of an application or port, but there may be some cases where
      you wish to specify these non-core functions by default. For this
      purpose you may use the keyword default_variants.</para>

      <programlisting>default_variants    +foo +bar</programlisting>

      <!-- TODO: add warning not to use default_variant at the moment -->

      <note>
        <para>The default_variant keyword may only be used in the global
        Portfile section.</para>
      </note>
    </section>
  </section>

  <section id="development.patches">
    <title>Patch Files</title>

    <para>Patch files are files created with the Unix command
    <command>diff</command> that are applied using the command
    <command>patch</command> to modify text files to fix bugs or extend
    functionality.</para>

    <section id="development.patches.portfile">
      <title>Creating Portfile Patches</title>

      <para>If you wish to contribute modifications or fixes to a Portfile,
      you should do so in the form of a patch. Follow the steps below to
      create Portfile patch files</para>

      <orderedlist>
        <listitem>
          <para>Make a copy of the Portfile you wish to modify; both files
          must be in the same directory, though it may be any
          directory.</para>

          <programlisting><prompt>%%</prompt> <userinput>cp -p Portfile Portfile.orig</userinput></programlisting>
        </listitem>

        <listitem>
          <para>Edit the file to make it as you want it to be after it is
          fetched.</para>
        </listitem>

        <listitem>
          <para>Now use the Unix command <command>diff -u </command>to create
          a <quote>unified</quote> diff patch file. Put the name of the port in
          the patchfile, for example, Portfile-rrdtool.diff.</para>

          <programlisting><prompt>%%</prompt> <userinput>diff -u Portfile.orig Portfile &gt; Portfile-rrdtool.diff</userinput></programlisting>
        </listitem>

        <listitem>
          <para>A patch file that is a <quote>unified</quote> diff file is the
          easiest to interpret by humans and this type should always be used
          for ports. The Portfile patch below will change the version and
          checksums when applied.</para>

          <programlisting>--- Portfile.orig        2011-07-25 18:52:12.000000000 -0700
+++ Portfile    2011-07-25 18:53:35.000000000 -0700
@@ -2,7 +2,7 @@
 PortSystem          1.0
 name                foo
 
-version             1.3.0
+version             1.4.0
 categories          net
 maintainers         nomaintainer
 description         A network monitoring daemon.
@@ -13,9 +13,9 @@
 
 homepage            http://rsug.itd.umich.edu/software/${name}
 
 master_sites        ${homepage}/files/
-checksums           rmd160 f0953b21cdb5eb327e40d4b215110b71
+checksums           rmd160 01532e67a596bfff6a54aa36face26ae
 extract.suffix      .tgz
 platforms           darwin
</programlisting>
        </listitem>
      </orderedlist>

      <para>Now you may attach the patch file to a MacPorts Trac ticket for
      the port author to evaluate.</para>
    </section>

    <section id="development.patches.source">
      <title>Creating Source Code Patches</title>

      <para>Necessary or useful patches to application source code should
      generally be sent to the application developer rather than the port
      author so the modifications may be included in the next version of the
      application.</para>

      <para>Generally speaking, you should create one patch file for each
      logical change that needs to be applied. Patchfile filenames should
      uniquely distinguish the file and generally be of the form
      <filename>patch-</filename><replaceable>&lt;identifier&gt;</replaceable><filename>.diff</filename>,
      where the <replaceable>identifier</replaceable> is a hint of what the
      patch does. For example, this can be the filename of the patched file as in
      <filename>patch-</filename><replaceable>src-Makefile.in</replaceable><filename>.diff</filename>.</para>

      <para>You may use patch files that patch multiple files under these
      conditions:</para>

      <itemizedlist>
        <listitem>
          <para>You find existing patch files that do so.</para>
        </listitem>

        <listitem>
          <para>If fixing a particular problem or bug requires changes in
          multiple files&mdash;in those cases the patch filename should reference
          the problem or bug, for example:
          <filename>patch-</filename><replaceable>destdir-variable-fix</replaceable><filename>.diff</filename></para>
        </listitem>
      </itemizedlist>

      <para>To create a patch to modify a single file, follow the steps
      below.</para>

      <orderedlist>
        <listitem>
          <para>Locate the file you wish to patch in its original location
          within the unpacked source directory and make a duplicate of
          it.</para>

          <programlisting><prompt>%%</prompt> <userinput>cd ~/Downloads/foo-1.34/src</userinput>
<prompt>%%</prompt> <userinput>cp -p Makefile.in Makefile.in.orig</userinput></programlisting>
        </listitem>

        <listitem>
          <para>Edit the file and modify the text to reflect your
          corrections.</para>
        </listitem>

        <listitem>
          <para>Now <command>cd</command> to the top-level directory of the
          unpacked source, and use the Unix command <command>diff -u</command>
          to create a <quote>unified</quote> diff patch file.</para>

          <programlisting><prompt>%%</prompt> <userinput>cd ~/Downloads/foo-1.34</userinput>
<prompt>%%</prompt> <userinput>diff -u src/Makefile.in.orig src/Makefile.in &gt; patch-src-Makefile.in.diff</userinput></programlisting>

          <para>You should execute <command>diff</command> from
          the top-level directory of the unpacked source code, because during
          the patch phase MacPorts by default uses the patch argument
          <option>-p0</option>, which does not strip prefixes with any leading
          slashes from file names found in the patch file (as opposed to
          <option>-p1</option> that strips one, etc), and any path not
          relative to the top-level directory of the unpacked source will fail
          during the patch phase.</para>

          <note>
            <para>If you find an existing source file patch you wish to use
            that contains leading path information (diff was executed from a
            directory higher than the top-level source directory), you will
            need to use the <link linkend="reference.phases.patch">patch phase
            keyword</link> <code>patch.pre_args</code> to specify a
            <option>-px</option> value for how many prefixes with leading
            slashes are to be stripped off.</para>
          </note>
        </listitem>

        <listitem>
          <para>A patch file that is a <quote>unified</quote> diff file is the
          easiest to interpret by humans and this type should always be used
          for ports. See the example below where a patch adds
          <varname>DESTDIR</varname> support to <filename>Makefile.in</filename>.</para>

          <programlisting>--- src/Makefile.in.orig   2007-06-01 16:30:47.000000000 -0700
+++ src/Makefile.in       2007-06-20 10:10:59.000000000 -0700
@@ -131,23 +131,23 @@
        $(INSTALL_DATA)/gdata $(INSTALL_DATA)/perl
 
 install-lib:
-       -mkdir -p $(INSTALL_LIB)
+       -mkdir -p $(DESTDIR)$(INSTALL_LIB)
        $(PERL) tools/install_lib -s src -l $(INSTALL_LIB) $(LIBS)
-       cp $(TEXT) $(INSTALL_LIB)/
+       cp $(TEXT) $(DESTDIR)$(INSTALL_LIB)/</programlisting>
        </listitem>

        <listitem>
          <para>Place the patch
          <filename>patch-src-Makefile.in.diff</filename> in the directory
          <filename>${portpath}/files</filename> and use it in a port using
          the <code>patchfiles</code> keyword. <varname>${portpath}</varname>
          may be in a local Portfile repository during development, or
          <filename>files/</filename> may be in a port's
          <varname>${portpath}</varname> in the global MacPorts
          repository.</para>

          <programlisting>patchfiles          patch-src-Makefile.in.diff</programlisting>
        </listitem>
      </orderedlist>
    </section>

    <section id="development.patches.applying">
      <title>Manually Applying Patches</title>

      <para>MacPorts applies patch files automatically, but you may want to
      know how to apply patch files manually if you want to test patch files
      you have created or you wish to apply uncommitted Portfile
      patches.</para>

      <orderedlist>
        <listitem>
          <para>Change to the directory containing the file to be patched. In
          this example, we'll apply a Portfile patch to the postfix
          port.</para>

          <programlisting><prompt>%%</prompt> <userinput>cd $(port dir postfix)</userinput></programlisting>
        </listitem>

        <listitem>
          <para>Now apply the patch from your Downloads folder, or wherever you
          put it. The patchfile knows the name of the file to be patched.</para>

          <programlisting><prompt>%%</prompt> <userinput>patch -p0 &lt; ~/Downloads/Portfile-postfix.diff</userinput></programlisting>

          <screen>patching file Portfile</screen>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section id="development.local-repositories">
    <title>Local Portfile Repositories</title>

    <para>To create and test Portfiles that are not yet published in the MacPorts ports tree,
      you may create a local Portfile repository as shown. Replace the hypothetical user
      <filename>julesverne</filename> with your username in the example below.</para>

    <orderedlist>
      <listitem>
        <para>Open <filename>sources.conf</filename> in a text
        editor. For example, to open it into TextEdit:</para>

        <programlisting><prompt>%%</prompt> <userinput>open -e ${prefix}/etc/macports/sources.conf</userinput></programlisting>
      </listitem>

      <listitem>
        <para>Insert a URL pointing to your local repository location before
        the rsync URL as shown.</para>

        <programlisting>file:///Users/julesverne/ports
rsync://rsync.macports.org/release/ports [default]
</programlisting>

        <note>
          <para>The file URL should always appear before the rsync URL so that
          local Portfiles can be tested that are duplicated in the MacPorts
          tree, because <command>port</command> will always
          operate on the first Portfile it encounters.</para>
        </note>
      </listitem>

      <listitem>
        <para>Place the Portfiles you create inside a directory whose name
        matches the port, which should in turn be placed inside a directory
        that reflects the port's primary category (the first category entry in
        the Portfile). For example, to create the directory for a hypothetical
        port <quote>bestevergame</quote> and to begin editing its Portfile in
        TextEdit, you can use these commands:</para>

        <programlisting><prompt>%%</prompt> <userinput>mkdir -p ~/ports/games/bestevergame</userinput>
<prompt>%%</prompt> <userinput>cd ~/ports/games/bestevergame</userinput>
<prompt>%%</prompt> <userinput>touch Portfile</userinput>
<prompt>%%</prompt> <userinput>open -e Portfile</userinput></programlisting>

        <para>See other sections in the Guide for help writing Portfiles. If
        you've already written the Portfile elsewhere, you can instead copy
        the Portfile into this directory.</para>
      </listitem>

      <listitem>
        <para>If your Portfile needs to apply any patches to the port's source
        files, create a <filename>files</filename> directory and place the
        patchfiles in it, and reference the patchfiles in your Portfile, as
        explained in
        <link linkend="development.patches.source">Creating Source Code Patches</link>.</para>
      </listitem>

      <listitem>
        <para>After you create or update your Portfile, use
        <command>portindex</command> in the local repository's
        directory to create or update the index of the ports in your local
        repository.</para>

        <programlisting>%% <userinput>cd ~/ports</userinput>
%% <userinput>portindex</userinput></programlisting>

        <screen>Creating software index in /Users/julesverne/ports
Adding port games/bestevergame

Total number of ports parsed:   1
Ports successfully parsed:      1
Ports failed:                   0</screen>
      </listitem>
    </orderedlist>

    <para>Once the local port is added to the <filename>PortIndex</filename>,
    it becomes available for searching or installation as with any other
    Portfile in the MacPorts tree:</para>

    <programlisting><prompt>%%</prompt> <userinput>port search bestever</userinput></programlisting>

    <screen>bestevergame @1.1 (games)
    The Best Ever Game</screen>
  </section>

  <section id="development.practices">
    <title>Portfile Best Practices</title>

    <para>This section contains practical guidelines for creating Portfiles
    that install smoothly and provide consistency between ports. The following
    sections are on the TODO list.</para>

    <section id="development.practices.portstyle">
      <title>Port Style</title>

      <para>Portfiles may be thought of as a set of declarations rather than
      a piece of code. It is best to format the port file is if it were
      a table consisting of keys and values. In fact, the simplest of ports
      will only contain a small block of values. Nicely formatted compact
      tables will result in more values being visible at the same time.</para>

      <para>The two columns should be separated by spaces (not tabs), so you
      should set your editor to use soft tabs, which are tabs emulated by
      spaces. By default, the top line of all Portfiles should use
      a modeline that defines soft tabs for the vim and emacs editors as shown.</para>

      <programlisting># -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4</programlisting>

      <para>The left column should consist of single words, and will be
      separated from the more complex right side by spaces in multiples of
      four. Variable assignments and variant declarations are exceptions, and
      may be considered a single word on the left side, with a single space
      between words.</para>

      <programlisting>set libver "8.5"</programlisting>

      <para>When items require multiple lines with line continuation, they can
      be separated from the previous and next items with a blank line.
      Indent the additional lines to the same column that the right side
      begins on in the first line.</para>

      <programlisting>checksums               rmd160  7bbfce4fecc2a8e1ca081169e70c1a298ab1b75a \
                        sha256  2829fcb7393bac85925090b286b1f9c3cd3fbbf8e7f35796ef4131322509aa53</programlisting>

      <para>Should a key item such as a phase or variant require braces, the
      opening brace should appear on the same line and the closing brace should
      be on its own line. The block formed by the braces is indented for visual
      clearance. Braces merely quoting strings, for example the description of
      variants, are placed on the same line without line breaks.</para>

      <programlisting>variant mysql5 description {Enable support for MySQL 5} {
    depends_lib-append        port:mysql5
    configure.args-replace    --without-mysql5 --with-mysql5
}</programlisting>

      <para>Frequently multiple items are necessary in the second column. For
      example, to set multiple source download locations, multiple
      <code>master_sites</code> must be defined. Unless the second column
      items are few and short you should place each additional item on a new
      line and separate lines with a backslash. Indent the lines after the
      first line to make it clear the items are second column values and also
      to emphasize the unity of the block.</para>

      <programlisting>destroot.keepdirs    ${destroot}${prefix}/var/run \
                     ${destroot}${prefix}/var/log \
                     ${destroot}${prefix}/var/cache/mrtg</programlisting>
    </section>

    <section id="development.practices.dont-overwrite">
      <title>Don't Overwrite Config Files</title>

      <para>TODO:</para>
    </section>

    <section id="development.practices.install-docs">
      <title>Install Docs and Examples</title>

      <para>TODO:</para>
    </section>

    <section id="development.practices.provide-messages">
      <title>Provide User Messages</title>

      <para>TODO:</para>
    </section>

    <section id="development.practices.use-variables">
      <title>Use Variables</title>

      <para>TODO: Set variables so changing paths may be done in one place;
      use them anytime it makes updates simpler: distname
      ${name}-src-${version}</para>
    </section>


    <section id="development.practices.rename-replace-port">
      <title>Renaming or replacing a port</title>

      <para>If there is the need to replace a port with another port or a
      renaming is necessary for some reason, the port should be marked as
      <code>replaced_by</code>.</para>

      <para>As an illustration of a typical workflow the port
      <quote>skrooge-devel</quote> shall be taken. This port had been used for
      testing new versions of skrooge, but it turned out to have become
      unnecessary due to the fact that skrooge's developers currently prefer a
      distribution via port <quote>skrooge</quote> instead. </para>

      <para>At the end of this section the use of the obsolete PortGroup is suggested
      as an even shorter approach to the below described workflow.</para>

      <section id="development.replaced_by">
        <title>The long way</title>

        <para>Skrooge's original devel port file looked like this:</para>

        <programlisting># -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           kde4    1.1

fetch.type          svn
svn.url             svn://anonsvn.kde.org/home/kde/trunk/extragear/office/skrooge
svn.revision        1215845

name                skrooge-devel
version             0.8.0-${svn.revision}

categories          kde finance
maintainers         mk pixilla openmaintainer
description         Skrooge
long_description    Personal finance management tool for KDE4, with the aim of being highly intuitive, while \
                    providing powerful functions such as reporting (including graphics), persistent \
                    Undo/Redo, encryption, and much more...

conflicts           skrooge

platforms           darwin
license             GPL-3

homepage            http://skrooge.org
master_sites        http://skrooge.org/files/

livecheck.type      none

distname            skrooge

depends_lib-append  port:kdelibs4 \
                    port:libofx \
                    port:qca-ossl \
                    port:kdebase4-runtime \
                    port:oxygen-icons</programlisting>

        <para>The following steps have to be taken to ensure a smooth transition
          for a MacPorts user updating his local installation using
          <userinput>sudo port upgrade</userinput>:</para>

        <orderedlist>
          <listitem>
            <para> add the line <code>replaced_by foo</code> where foo is the
              port this one is replaced by; when a user upgrades this port,
              MacPorts will instead install the replacement port</para>
            <programlisting>replaced_by         skrooge</programlisting>
          </listitem>

          <listitem>
            <para> increase the version, revision, or epoch, so that users who
              have this port installed will get notice in <code>port
                outdated</code> that they should upgrade it and trigger the above
              process</para>
            <programlisting>revision            1</programlisting>
          </listitem>

          <listitem>
            <para> clear distfiles (have a line reading only
              <code>distfiles</code>) so that no distfile is downloaded for this
              stub port</para>
            <programlisting>distfiles</programlisting>
          </listitem>

          <listitem>
            <para> delete master_sites since there aren't any distfiles to
              download</para>
          </listitem>

          <listitem>
            <para> disable livecheck</para>
            <programlisting>livecheck.type      none</programlisting>
          </listitem>

          <listitem>
            <para> add a pre-configure block with a <code>ui_error</code> and
              <code>return -code error</code> explaining to users who try to
              install this port that the port has been replaced</para>
            <programlisting>pre-configure {
    ui_error "Please do not install this port since it has been replaced by 'skrooge'."
    return -code error
}</programlisting>
          </listitem>
        </orderedlist>

        <para>With above modifications the port file eventually looks like
          this:</para>

        <programlisting># -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                skrooge-devel
svn.revision        1215845
version             0.8.0-${svn.revision}
revision            1

replaced_by         skrooge

categories          kde finance
maintainers         mk pixilla openmaintainer
description         Skrooge
long_description    Personal finance management tool for KDE4, with the aim of being highly intuitive, while \
                    providing powerful functions such as reporting (including graphics), persistent \
                    Undo/Redo, encryption, and much more...

platforms           darwin
license             GPL-3

homepage            http://skrooge.org

livecheck.type      none

pre-configure {
    ui_error "Please do not install this port since it has been replaced by 'skrooge'."
    return -code error
}

distfiles</programlisting>

        <para>A user upgrading ports will experience the following for port
          <quote>skrooge-devel</quote>:</para>
        <programlisting><prompt>%%</prompt> <userinput>sudo port upgrade skrooge-devel</userinput></programlisting>
        <screen>--->  skrooge-devel is replaced by skrooge
--->  Computing dependencies for skrooge
--->  Fetching skrooge
--->  Verifying checksum(s) for skrooge
--->  Extracting skrooge
--->  Configuring skrooge
--->  Building skrooge
--->  Staging skrooge into destroot
--->  Deactivating skrooge-devel @0.8.0-1215845_0
--->  Cleaning skrooge-devel
--->  Computing dependencies for skrooge
--->  Installing skrooge @0.8.0.6_0
--->  Activating skrooge @0.8.0.6_0
##########################################################
# Don't forget that dbus needs to be started as the local 
# user (not with sudo) before any KDE programs will launch
# To start it run the following command:                  
# launchctl load /Library/LaunchAgents/org.freedesktop.dbus-session.plist
##########################################################

######################################################
#  Programs will not start until you run the command 
#  'sudo chown -R $USER ~/Library/Preferences/KDE'  
#  replacing $USER with your username.              
######################################################
--->  Cleaning skrooge</screen>

        <para>In case a user actually tries to install the obsolete port
          <quote>skrooge-devel</quote> it would be pointed out by an error message that
          this is impossible now:</para>
        <programlisting><prompt>%%</prompt> <userinput>sudo port install skrooge-devel</userinput></programlisting>
        <screen>--->  Fetching skrooge-devel
--->  Verifying checksum(s) for skrooge-devel
--->  Extracting skrooge-devel
--->  Configuring skrooge-devel
Error: Please do not install this port since it has been replaced by 'skrooge'.
Error: Target org.macports.configure returned: 
Log for skrooge-devel is at: /opt/local/var/macports/logs/_opt_local_var_macports_sources_rsync.macports.org_release_ports_kde_skrooge-devel/main.log
Error: Status 1 encountered during processing.
To report a bug, see &lt;http://guide.macports.org/#project.tickets&gt;</screen>

      </section>

      <section id="development.obsolete-portgroup">
        <title>The shortcut: PortGroup obsolete</title>

        <para>Using the PortGroup obsolete makes the task described in the previous subsection
          much easier:</para>

        <programlisting>
# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
replaced_by         skrooge
PortGroup           obsolete 1.0
name                skrooge-devel
svn.revision        1215845
version             0.8.0-${svn.revision}
revision            2</programlisting>

        <para>The PortGroup defines a number of reasonable defaults for a port that is only
          there to inform users that they should uninstall it and install something else
          instead. You might want to override some of the defaults though. For details have
          a look at the PortGroup's source code in
          <filename>${prefix}/var/macports/sources/rsync.macports.org/release/ports/_resources/port1.0/group/obsolete-1.0.tcl</filename>.</para>

        <note>
          <para>It is important to specify <varname>replaced_by</varname> BEFORE the
            <varname>PortGroup</varname> line!</para>
        </note>

      </section>

    </section>

    <section id="development.practices.removing-port">
      <title>Removing a port</title>

      <para>If a port has to be removed from MacPorts one should consider
        the hints concerning replacing it by some alternative port given
        <link linkend="development.practices.rename-replace-port">above</link>.
        It is recommended to wait one year before the port directory
        is actually removed from the MacPorts ports tree.
      </para>

      <para>If there is no replacement for a port, it can simply be deleted
        immediately.</para>

    </section>

  </section>

  <section id="development.buildbot">
    <title>MacPorts' buildbot</title>

    <para>The <ulink url="https://build.macports.org/">buildbot</ulink> is a port
      build-service currently supporting building of all committed ports for Snow Leopard,
      Lion, and Mountain Lion using the MacPorts AutoBuild
      (<ulink url="http://svn.macports.org/repository/macports/contrib/mpab/">MPAB</ulink>)
      scripts.</para>

    <para>Every time a maintainer commits changes to MacPorts' ports Git
      repository the buildbot will check whether a rebuild of the corresponding
      port(s) would be necessary. If the port(s) in question are distributable
      their binary archives will be kept for subsequent distribution for all
      versions of the Mac operating system for which build machines are
      available. See the <ulink url="https://build.macports.org/builders">list
        of builders</ulink> to find out which platforms these currently
      are.</para>

    <para>If a build error occurred for a port its maintainer will be informed via
      an email so that problems which did not surface on the maintainer's machine will
      not go unnoticed.

      Port maintainers will find the
      <ulink url="https://build.macports.org/waterfall">waterfall</ulink>
      and the
      <ulink url="https://build.macports.org/builders">builders</ulink>
      views most useful since they give information about the build status and offer
      the possibility to build ones port(s) on specific builders.</para>

    <para>Thus the buildbot helps to keep MacPorts consistent on various
      OS X versions, i.e., a maintainer does not need access to these versions anymore in
      order to assure that the port(s) maintained build without problems. Currently only
      the default port variants will be built and kept.</para>

  </section>

</chapter>

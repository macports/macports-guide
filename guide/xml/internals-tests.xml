<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
"http://docbook.org/xml/5.0/dtd/docbook.dtd">
<section xml:id="internals.tests">
    <title>Tests</title>

    <para>
    The MacPorts testing framework uses <link xlink:href="http://wiki.tcl.tk/1502">tcltest</link> for its unit tests
    as well as regression tests. The framework was developed during Google Summer of Code 2013 by Marius Coțofană (marius@).
    </para>

    <para>
    To keep things simple, each module of MacPorts (
    <link xlink:href="https://github.com/macports/macports-base/tree/master/src/macports1.0">macports1.0</link>,
    <link xlink:href="https://github.com/macports/macports-base/tree/master/src/package1.0">package1.0</link>,
    <link xlink:href="https://github.com/macports/macports-base/tree/master/src/port1.0">port1.0</link>,
    <link xlink:href="https://github.com/macports/macports-base/tree/master/src/registry2.0">registry2.0</link>
    ) has its own <filename>tests/</filename> directory. Each Tcl script in a module (e.g.
    <link xlink:href="https://github.com/macports/macports-base/blob/master/src/macports1.0/macports.tcl">macports.tcl</link>)
    has its own test script located in the <filename>tests</filename> directory, with the same name and the '.test' extension (e.g.
    <link xlink:href="https://github.com/macports/macports-base/blob/master/src/macports1.0/tests/macports.test">macports.test</link>).
    Every proc in a script (e.g. <code>proc macports::findBinary</code>) should have its own test proc
    (e.g. <code>test findBinary</code>) in the corresponding test file. Test procs should maintain the order in the
    original script and should be independent one of another.
    </para>

    <section xml:id="internals.tests.running">
        <title>Running tests</title>

        <para>
        Tests can be run only on an installed version of MacPorts (so make sure you have run <command>sudo make install</command>). 
        </para>

        <para>
        The easiest way to run all the tests, is to use the target in the Makefile.
        </para>

        <programlisting><prompt>$ </prompt><userinput>make test</userinput></programlisting>

        <para>
        Each <filename>tests/</filename> directory has a <filename>test.tcl</filename> file, used by the make target to
        run all tests and format the output, making it easy to read. The script just runs the tests individually,
        printing the test file name, the total number of tests, number of passed, skipped, failed as well as constraints
        or errors of failed tests. This is one possible output when running <filename>macports.test</filename>:
        </para>

        <screen>Total:31 Passed:31 Failed:0 Skipped:0  macports.test</screen>

        <para>
        Many tests need root privileges to run correctly, but will be auto skipped in the other case. Constraints are
        printed just below the final result, together with the number of test cases that require it, as so:
        </para>

        <screen>Total:31 Passed:24 Failed:0 Skipped:7  macports.test
<!--         -->    Constraint: 7	root</screen>

        <para>
        The stack trace of an error that occurs during a test is printed below the constraints (if any). 
        </para>

        <para>
        The file can be used also to:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    run all tests:
                </para>
                <programlisting><prompt>$</prompt> <userinput>tclsh test.tcl</userinput></programlisting>
            </listitem>
            <listitem>
                <para>
                    get debug info:
                </para>
                <programlisting><prompt>$</prompt> <userinput>tclsh test.tcl -debug \[0-3\]</userinput></programlisting>
            </listitem>
            <listitem>
                <para>
                    list individual test files:
                </para>
                <programlisting><prompt>$</prompt> <userinput>tclsh test.tcl -l</userinput></programlisting>
            </listitem>
            <listitem>
                <para>
                    run specific test files:
                </para>
                <programlisting><prompt>$</prompt> <userinput>tclsh test.tcl -t macports.test</userinput></programlisting>
            </listitem>
            <listitem>
                <para>
                    print help message:
                </para>
                <programlisting><prompt>$</prompt> <userinput>tclsh test.tcl -h</userinput></programlisting>
            </listitem>
        </itemizedlist>

        <para>
        Specific test cases can be run using the <command>'-match'</command> argument for the file that contains the
        test, from its parent directory.
        </para>

        <programlisting><prompt>$</prompt> <userinput>tclsh macports.test -match mportclose</userinput></programlisting>

        <para>
            Regression tests can be found in <link xlink:href="https://github.com/macports/macports-base/tree/master/tests/test/">tests/test/</link>
        and can be run just as unit tests, using <command>make test</command> from the parent directory. 
        </para>
    </section>

    <section xml:id="internals.tests.mustknow">
        <title>Must know</title>

        <itemizedlist>
            <listitem><para>regression tests have their own directory, found in <link xlink:href="https://github.com/macports/macports-base/tree/master/tests/test/">trunk/base/tests/test</link></para></listitem>
            <listitem><para>each module of MacPorts (port1.0, macports1.0, package1.0) has its own ‘tests/’ directory where the test files are located and also additional files needed (Portfile, test.tcl)</para></listitem>
            <listitem><para>each file in a module has a corresponding test file (.test extension) in the ‘tests/’ directory</para></listitem>
            <listitem><para>each proc in a file has a corresponding test case (test proc_name) in the</para></listitem>
            <listitem><para>each test case must be independent from each other, so they can be run individually if needed</para></listitem>
            <listitem><para>each test must clean all auxiliary files or directories it creates and revert all ports it installs</para></listitem>
            <listitem><para>use a single test procedure for each tested proc; sub-test cases should be included in the same body</para></listitem>
            <listitem><para>when adding new regression tests, make sure to specify its name in the test_suite list of 'trunk/base/tests/test.tcl'</para></listitem>
            <listitem><para>variables used in tests can be set at install-time using the '[module]_test_autoconf.tcl.in' file in each module (macports_autoconf.tcl.in, port_autoconf.tcl.in)</para></listitem>
            <listitem><para>for some tests in package1.0, an update of the ports tree is required; this is done automatically if they are run using the 'test' target in the Makefile, with root privileges </para></listitem>
        </itemizedlist>
    </section>

    <section xml:id="internals.tests.sample-file">
        <title>Sample file</title>

        <programlisting># include required tcltest package and set namespace
<!--     -->package require tcltest 2
<!--     -->namespace import tcltest::*
<!--     -->
<!--     --># get absolute path to current ‘tests/’ directory
<!--     -->set pwd [file normalize $argv0]
<!--     -->set pwd [eval file join {*}[lrange [file split $pwd] 0 end-1]]
<!--     -->
<!--     --># the macports_fastload.tcl file needs to be sourced so we
<!--     --># can directly require packages later on; we can use the autoconf
<!--     --># file to get the path to the file
<!--     -->source ../port_test_autoconf.tcl
<!--     -->source $macports::autoconf::macports_tcl_dir/macports1.0/macports_fastload.tcl
<!--     -->package require macports 1.0
<!--     -->
<!--     --># source/require tested/needed files
<!--     --># source ../../port1.0/portutil.tcl
<!--     -->package require portutil 1.0
<!--     -->
<!--     --># use custom macports.conf and sources.conf
<!--     --># you need to provide the sources.conf (see additional files) file
<!--     -->makeDirectory $pwd/tmpdir
<!--     -->makeDirectory $pwd/tmpdir/share
<!--     -->makeDirectory $pwd/tmpdir/var/macports/registry
<!--     -->set fd [open $pwd/tmpdir/macports.conf w+]
<!--     -->puts $fd "portdbpath $pwd/tmpdir/var/macports"
<!--     -->puts $fd "prefix $pwd/tmpdir"
<!--     -->puts $fd "variants_conf $pwd/tmpdir/variants.conf"
<!--     -->puts $fd "sources_conf $pwd/sources.conf"
<!--     -->puts $fd "applications_dir $pwd/tmpdir/Applications"
<!--     -->puts $fd "frameworks_dir $pwd/tmpdir/Library/Frameworks"
<!--     -->close $fd
<!--     -->set env(PORTSRC) $pwd/tmpdir/macports.conf
<!--     -->file link -symbolic $pwd/tmpdir/share/macports $macports::autoconf::prefix/share/macports
<!--     -->close [open $pwd/tmpdir/variants.conf w+]
<!--     -->
<!--     --># debug options
<!--     --># ports_debug and ports_verbose are commented out as default
<!--     --># need to be set before ‘mportinit’
<!--     -->array set ui_options {}
<!--     -->#set ui_options(ports_debug)   yes
<!--     -->#set ui_options(ports_verbose) yes
<!--     -->mportinit ui_options
<!--     -->
<!--     --># if you need to use procs from macports namespace, that are just aliases, you can
<!--     --># always source library.tcl (see additional files) which provides a copy macports::worker_init
<!--     --># without sub-interpreters; it also sets some important environment variables like
<!--     --># os.platform, os.major, os.arch, workpath, destpath, portpath
<!--     --># some other option would be to get the $workername from a $mport and use it directly
<!--     -->
<!--     --># additional procs needed for testing go before the actual test cases
<!--     -->
<!--     -->
<!--     --># test case example
<!--     --># the test name must reflect the tested proc (remove namespaces if any)
<!--     --># the test description should list specific values from the tested proc on which it depends
<!--     --># or the partial cases it tests
<!--     -->test mportclose {
<!--     -->    Mport close unit test.
<!--     --># this branch is optional and you can use other constraints too
<!--     -->} -constraints {
<!--     -->    root
<!--     --># the setup branch is optional
<!--     -->} -setup {
<!--     -->    set mport [mportopen file://.]
<!--     --># please make output as useful as possible (even error cases)
<!--     --># all sub-test cases should be part of the body branch
<!--     -->} -body {
<!--     -->    if {[catch {mportclose $mport}] != 0} {
<!--     -->        return "FAIL: cannot run mportclose"
<!--     -->    }
<!--     -->    return "Mport close successful."
<!--     --># the cleanup branch is optional
<!--     -->} -cleanup {
<!--     -->    file delete -force $pwd/work
<!--     -->} -result "Mport close successful."
<!--     -->
<!--     -->
<!--     --># print test results
<!--     -->cleanupTests</programlisting>
    </section>
    
    <section xml:id="internals.tests.addtional-files">
        <title>Additional files</title>

        <itemizedlist>
            <listitem><para>In all tests we use this <link xlink:href="https://github.com/macports/macports-base/blob/master/src/macports1.0/tests/Portfile">Portfile</link>.</para></listitem>
            <listitem><para>This is the <link xlink:href="https://github.com/macports/macports-base/blob/master/src/macports1.0/tests/test.tcl">test.tcl</link> file used to run and parse the output of all the tests in a module.</para></listitem>
            <listitem><para>A worker_init copy, without using sub-interpreters <link xlink:href="https://github.com/macports/macports-base/blob/master/src/package1.0/tests/library.tcl">library.tcl</link>.</para></listitem>
            <listitem><para>Example of <link xlink:href="https://github.com/macports/macports-base/blob/master/src/macports1.0/tests/sources.conf">sources.conf</link>.</para></listitem>
            <listitem><para>An example of a test file <link xlink:href="https://github.com/macports/macports-base/blob/master/src/macports1.0/tests/macports.test">macports.test</link>.</para></listitem>
            <listitem><para>A <link xlink:href="https://github.com/macports/macports-base/blob/master/tests/test/library.tcl">library.tcl</link> of useful procs in regression testing.</para></listitem>
        </itemizedlist>

    </section>

    <section xml:id="internals.tests.resources">
        <title>Resources</title>

        <itemizedlist>
            <listitem><para><link xlink:href="http://wiki.tcl.tk/1502">Tcltest official wiki page</link></para></listitem>
            <listitem><para><link xlink:href="http://web.archive.org/web/20080617153002/www.tclscripting.com/articles/apr06/article1.html">Getting started with tcltest</link></para></listitem>
            <listitem><para><link xlink:href="http://www.tcl.tk/man/tcl8.5/TclCmd/tcltest.htm">Official tcltest documentation</link></para></listitem>
        </itemizedlist>
    </section>
</section>
